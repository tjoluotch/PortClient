// Code generated by counterfeiter. DO NOT EDIT.
package portservicefakes

import (
	"PortsProject/internal/pkg/portservice"
	"io"
	"sync"

	"google.golang.org/grpc"
)

type FakePortsInterface struct {
	ClientStub        func(*grpc.ClientConn)
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
		arg1 *grpc.ClientConn
	}
	DecodePortsFromFileStub        func(io.Reader) error
	decodePortsFromFileMutex       sync.RWMutex
	decodePortsFromFileArgsForCall []struct {
		arg1 io.Reader
	}
	decodePortsFromFileReturns struct {
		result1 error
	}
	decodePortsFromFileReturnsOnCall map[int]struct {
		result1 error
	}
	GetPortsStub        func() (*portservice.PortCollection, error)
	getPortsMutex       sync.RWMutex
	getPortsArgsForCall []struct {
	}
	getPortsReturns struct {
		result1 *portservice.PortCollection
		result2 error
	}
	getPortsReturnsOnCall map[int]struct {
		result1 *portservice.PortCollection
		result2 error
	}
	SendPortStub        func(*portservice.Port) error
	sendPortMutex       sync.RWMutex
	sendPortArgsForCall []struct {
		arg1 *portservice.Port
	}
	sendPortReturns struct {
		result1 error
	}
	sendPortReturnsOnCall map[int]struct {
		result1 error
	}
	StartGRPClientStub        func() (*grpc.ClientConn, error)
	startGRPClientMutex       sync.RWMutex
	startGRPClientArgsForCall []struct {
	}
	startGRPClientReturns struct {
		result1 *grpc.ClientConn
		result2 error
	}
	startGRPClientReturnsOnCall map[int]struct {
		result1 *grpc.ClientConn
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePortsInterface) Client(arg1 *grpc.ClientConn) {
	fake.clientMutex.Lock()
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
		arg1 *grpc.ClientConn
	}{arg1})
	stub := fake.ClientStub
	fake.recordInvocation("Client", []interface{}{arg1})
	fake.clientMutex.Unlock()
	if stub != nil {
		fake.ClientStub(arg1)
	}
}

func (fake *FakePortsInterface) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakePortsInterface) ClientCalls(stub func(*grpc.ClientConn)) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *FakePortsInterface) ClientArgsForCall(i int) *grpc.ClientConn {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	argsForCall := fake.clientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortsInterface) DecodePortsFromFile(arg1 io.Reader) error {
	fake.decodePortsFromFileMutex.Lock()
	ret, specificReturn := fake.decodePortsFromFileReturnsOnCall[len(fake.decodePortsFromFileArgsForCall)]
	fake.decodePortsFromFileArgsForCall = append(fake.decodePortsFromFileArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	stub := fake.DecodePortsFromFileStub
	fakeReturns := fake.decodePortsFromFileReturns
	fake.recordInvocation("DecodePortsFromFile", []interface{}{arg1})
	fake.decodePortsFromFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePortsInterface) DecodePortsFromFileCallCount() int {
	fake.decodePortsFromFileMutex.RLock()
	defer fake.decodePortsFromFileMutex.RUnlock()
	return len(fake.decodePortsFromFileArgsForCall)
}

func (fake *FakePortsInterface) DecodePortsFromFileCalls(stub func(io.Reader) error) {
	fake.decodePortsFromFileMutex.Lock()
	defer fake.decodePortsFromFileMutex.Unlock()
	fake.DecodePortsFromFileStub = stub
}

func (fake *FakePortsInterface) DecodePortsFromFileArgsForCall(i int) io.Reader {
	fake.decodePortsFromFileMutex.RLock()
	defer fake.decodePortsFromFileMutex.RUnlock()
	argsForCall := fake.decodePortsFromFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortsInterface) DecodePortsFromFileReturns(result1 error) {
	fake.decodePortsFromFileMutex.Lock()
	defer fake.decodePortsFromFileMutex.Unlock()
	fake.DecodePortsFromFileStub = nil
	fake.decodePortsFromFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePortsInterface) DecodePortsFromFileReturnsOnCall(i int, result1 error) {
	fake.decodePortsFromFileMutex.Lock()
	defer fake.decodePortsFromFileMutex.Unlock()
	fake.DecodePortsFromFileStub = nil
	if fake.decodePortsFromFileReturnsOnCall == nil {
		fake.decodePortsFromFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodePortsFromFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePortsInterface) GetPorts() (*portservice.PortCollection, error) {
	fake.getPortsMutex.Lock()
	ret, specificReturn := fake.getPortsReturnsOnCall[len(fake.getPortsArgsForCall)]
	fake.getPortsArgsForCall = append(fake.getPortsArgsForCall, struct {
	}{})
	stub := fake.GetPortsStub
	fakeReturns := fake.getPortsReturns
	fake.recordInvocation("GetPorts", []interface{}{})
	fake.getPortsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePortsInterface) GetPortsCallCount() int {
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	return len(fake.getPortsArgsForCall)
}

func (fake *FakePortsInterface) GetPortsCalls(stub func() (*portservice.PortCollection, error)) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = stub
}

func (fake *FakePortsInterface) GetPortsReturns(result1 *portservice.PortCollection, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	fake.getPortsReturns = struct {
		result1 *portservice.PortCollection
		result2 error
	}{result1, result2}
}

func (fake *FakePortsInterface) GetPortsReturnsOnCall(i int, result1 *portservice.PortCollection, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	if fake.getPortsReturnsOnCall == nil {
		fake.getPortsReturnsOnCall = make(map[int]struct {
			result1 *portservice.PortCollection
			result2 error
		})
	}
	fake.getPortsReturnsOnCall[i] = struct {
		result1 *portservice.PortCollection
		result2 error
	}{result1, result2}
}

func (fake *FakePortsInterface) SendPort(arg1 *portservice.Port) error {
	fake.sendPortMutex.Lock()
	ret, specificReturn := fake.sendPortReturnsOnCall[len(fake.sendPortArgsForCall)]
	fake.sendPortArgsForCall = append(fake.sendPortArgsForCall, struct {
		arg1 *portservice.Port
	}{arg1})
	stub := fake.SendPortStub
	fakeReturns := fake.sendPortReturns
	fake.recordInvocation("SendPort", []interface{}{arg1})
	fake.sendPortMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePortsInterface) SendPortCallCount() int {
	fake.sendPortMutex.RLock()
	defer fake.sendPortMutex.RUnlock()
	return len(fake.sendPortArgsForCall)
}

func (fake *FakePortsInterface) SendPortCalls(stub func(*portservice.Port) error) {
	fake.sendPortMutex.Lock()
	defer fake.sendPortMutex.Unlock()
	fake.SendPortStub = stub
}

func (fake *FakePortsInterface) SendPortArgsForCall(i int) *portservice.Port {
	fake.sendPortMutex.RLock()
	defer fake.sendPortMutex.RUnlock()
	argsForCall := fake.sendPortArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortsInterface) SendPortReturns(result1 error) {
	fake.sendPortMutex.Lock()
	defer fake.sendPortMutex.Unlock()
	fake.SendPortStub = nil
	fake.sendPortReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePortsInterface) SendPortReturnsOnCall(i int, result1 error) {
	fake.sendPortMutex.Lock()
	defer fake.sendPortMutex.Unlock()
	fake.SendPortStub = nil
	if fake.sendPortReturnsOnCall == nil {
		fake.sendPortReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendPortReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePortsInterface) StartGRPClient() (*grpc.ClientConn, error) {
	fake.startGRPClientMutex.Lock()
	ret, specificReturn := fake.startGRPClientReturnsOnCall[len(fake.startGRPClientArgsForCall)]
	fake.startGRPClientArgsForCall = append(fake.startGRPClientArgsForCall, struct {
	}{})
	stub := fake.StartGRPClientStub
	fakeReturns := fake.startGRPClientReturns
	fake.recordInvocation("StartGRPClient", []interface{}{})
	fake.startGRPClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePortsInterface) StartGRPClientCallCount() int {
	fake.startGRPClientMutex.RLock()
	defer fake.startGRPClientMutex.RUnlock()
	return len(fake.startGRPClientArgsForCall)
}

func (fake *FakePortsInterface) StartGRPClientCalls(stub func() (*grpc.ClientConn, error)) {
	fake.startGRPClientMutex.Lock()
	defer fake.startGRPClientMutex.Unlock()
	fake.StartGRPClientStub = stub
}

func (fake *FakePortsInterface) StartGRPClientReturns(result1 *grpc.ClientConn, result2 error) {
	fake.startGRPClientMutex.Lock()
	defer fake.startGRPClientMutex.Unlock()
	fake.StartGRPClientStub = nil
	fake.startGRPClientReturns = struct {
		result1 *grpc.ClientConn
		result2 error
	}{result1, result2}
}

func (fake *FakePortsInterface) StartGRPClientReturnsOnCall(i int, result1 *grpc.ClientConn, result2 error) {
	fake.startGRPClientMutex.Lock()
	defer fake.startGRPClientMutex.Unlock()
	fake.StartGRPClientStub = nil
	if fake.startGRPClientReturnsOnCall == nil {
		fake.startGRPClientReturnsOnCall = make(map[int]struct {
			result1 *grpc.ClientConn
			result2 error
		})
	}
	fake.startGRPClientReturnsOnCall[i] = struct {
		result1 *grpc.ClientConn
		result2 error
	}{result1, result2}
}

func (fake *FakePortsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	fake.decodePortsFromFileMutex.RLock()
	defer fake.decodePortsFromFileMutex.RUnlock()
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	fake.sendPortMutex.RLock()
	defer fake.sendPortMutex.RUnlock()
	fake.startGRPClientMutex.RLock()
	defer fake.startGRPClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePortsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ portservice.PortsInterface = new(FakePortsInterface)
